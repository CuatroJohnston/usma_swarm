1a2
> import math
9c10
< class TutorialGreedyShooter(ss.Tactic):
---
> class HelloGreedyShooter(ss.Tactic):
24c25,29
<         self._name = 'TutorialGreedyShooter'
---
>         self._name = 'HelloGreedyShooter'
>         try:
>             self._vehicle_type = int(params['vehicle_type'])
>         except KeyError:
>             self._vehicle_type = enums.AC_FIXED_WING            
36d40
<                 # print uav.vehicle_id,
45,46d48
<         
<         #print self._blues.values()
50d51
<             #print self._reds[self._target_id]
52,55c53
<             # s = ", ".join(str(e) for e in self._shot)
<             # print "Reds Shot: "
<             # print s
<             #print "ID: %d   Target ID: %d   Dist: %d" % (self._id, self._target_id, min_dist)
---
> 
61,64c59,66
<             # Set the waypoint past the current target, so we don't go into a
<             # loiter mode
<             bearing = gps.gps_bearing(own_lat, own_lon, tgt_lat, tgt_lon)
<             lat, lon = gps.gps_newpos(own_lat, own_lon, bearing, 1000)
---
>             lat = tgt_lat
>             lon = tgt_lon
> 
>             if self._vehicle_type == enums.AC_FIXED_WING:
>                 # When using fixed wing, Set the waypoint past the current
>                 # target, so we don't go into a loiter mode
>                 bearing = gps.gps_bearing(own_lat, own_lon, tgt_lat, tgt_lon)
>                 lat, lon = gps.gps_newpos(own_lat, own_lon, bearing, 1000)
79d80
<                 #print "=====>ID: %d shot at Target %d" % (self._id, self._target_id)
82a84
> 
83a86,89
> 
>     def receive_firing_report(self, msg):
>         print '{} received that someone is targeting {}' \
>               .format(self._id, msg.report.target_id)
